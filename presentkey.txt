# Present Cipher
.equ x0 0x00
.equ x6 0x06
.equ x7 0x07
.equ cnt 0x08
.equ rnd 0x09
.equ ycnt 0x0A
.equ rnd 0x09
.equ tkcnt 0x0B
.equ y0 0x10
.equ y32 0x30
.equ sbox 0x50
.equ k0 0x60
.equ k1 0x61
.equ k3 0x63
.equ k7 0x67
.equ k8 0x68
.equ k10 0x6A
.equ k32 0xF8
.equ tk0 0x70
.equ tk8 0x78
.equ tk9 0x79
# start
# add round keys
.lbl mnlp
jsr rndky
.lbl sbst
# S Box
# S Box located in RAM at address sbox
# cnt in r1
mvi cnt, r0
mvi 0x07, r1
sts r1, r0
mvi sbox, r2
# status x[i] in r0
.lbl sblp
lds r1, r0
mvi 0x04, r3
srl r3, r0
add r2, r0
lds r0, r0
sll r3, r0
lds r1, r1
sll r3, r1
srl r3, r1
add r2, r1
lds r1, r1
lor r1, r0
mvi cnt, r3
lds r3, r1
sts r0, r1
dec r1
bni perm
sts r1, r3
jmp sblp
.lbl perm 
# start permutation
mvi cnt, r1
mvi x7, r0
sts r0, r1
mvi y0, r1
# unpack 8 bytes into 64 bytes
# one bit in the LSB of each byte
.lbl unpack
mvi 0x01, r3
lds r0, r0
jsr perm1
jsr perm1
jsr perm1
jsr perm1
jsr perm1
jsr perm1
jsr perm1
jsr perm1
mvi cnt, r3
lds r3, r0
dec r0
bni unpcknd
sts r0, r3
jmp unpack
.lbl unpcknd
# pack 64 bytes of 1 bit each into 8 bytes
mvi cnt, r1
mvi x7, r2
sts r2, r1
mvi ycnt, r0
mvi y0, r2
.lbl pack1
sts r2, r0
mvi 0x01, r1
mvi 0x00, r0
jsr perm2
jsr perm2
jsr perm2
jsr perm2
jsr perm2
jsr perm2
jsr perm2
# 8th byte has no shift and no increment
lds r2, r3
lor r3, r0
mvi cnt, r3
lds r3, r2
sts r0, r2
dec r2
bzi pack2
dec r2
sts r2, r3
mvi ycnt, r0
lds r0, r2
inc r2
jmp pack1
# even bytes
.lbl pack2
mvi cnt, r1
mvi x6, r2
sts r2, r1
mvi ycnt, r0
mvi y32, r2
.lbl pack2lp
sts r2, r0
mvi 0x01, r1
mvi 0x00, r0
jsr perm2
jsr perm2
jsr perm2
jsr perm2
jsr perm2
jsr perm2
jsr perm2
# 8th byte has no shift and no increment
lds r2, r3
lor r3, r0
mvi cnt, r3
lds r3, r2
sts r0, r2
dec r2
bni pck2nd
dec r2
sts r2, r3
mvi ycnt, r0
lds r0, r2
inc r2
jmp pack2lp
.lbl pck2nd
# compute next round key on the fly
# prestore k10 in k0
mvi k10, r0
mvi k0, r1
lds r0, r0
sts r0, r1
# rotate 80 bit key left by 61 bits
mvi tkcnt, r0
mvi tk0, r2
sts r2, r0
mvi k0, r1
# r0 is accumulator
# r1 is k[i] index
# r2 is tk[i] index
# r3 is shift distance
.lbl rtlp
lds r1, r0
mvi 0x05, r3
sll r3, r0
inc r1
lds r1, r2
mvi 0x03, r3
srl r3, r2
lor r2, r0
mvi tkcnt, r3
lds r3, r2
sts r0, r2
inc r2
sts r2, r3
mvi k10, r3
sub r1, r3
bzi rtnd
jmp rtlp
.lbl rtnd
# take S[tk[8]] and put in k1
mvi sbox, r0
mvi tk8, r2
lds r2, r2
mov r2, r1
mvi 0x04, r3
srl r3, r2
add r2, r0
lds r0, r0
sll r3, r0
sll r3, r1
srl r3, r1
lor r1, r0
mvi k1, r1
sts r0, r1
# put tk9 in k2
mvi tk9, r0
lds r0, r0
inc r1
sts r0, r1
# put tk0 - tk7 in k3 - k10
mvi tk0, r0
mvi k3, r1
.lbl swlp
lds r0, r2
sts r2, r1
mvi k10, r3
sub r1, r3
bzi swnd
inc r0
inc r1
jmp swlp
.lbl swnd 
# add round constant
# load round counter + offset 
mvi rnd, r0
lds r0, r0
inc r0
mov r0, r1
# operation on the k8 byte
mvi 0x01, r2
srl r2, r0
mvi k8, r2
lds r2, r3
xor r0, r3
sts r3, r2
# operation on the k9 byte
inc r2
mvi 0x07, r0
sll r0, r1
lds r2, r3
xor r1, r3
sts r3, r2
# end round constant
# end round key on the fly
# terminate main round loop
mvi rnd, r1
lds r1, r0
mvi 0x1E, r2
sub r0, r2
bzi fnrndky
inc r0
sts r0, r1
jmp mnlp
.lbl fnrndky
jsr rndky
.lbl lpnd
# end of program
.end
nop
# perm 1 function for unpacking
.lbl perm1
rol r3, r0
mov r0, r2
and r3, r2
sts r2, r1
inc r1
ret
# perm 2 function for packing
.lbl perm2
lds r2, r3
lor r3, r0
sll r1, r0
mvi 0x04, r3
add r3, r2
ret
# round key addition
.lbl rndky
# key address in r0
mvi k1, r0
# cnt in r1
mvi x7, r1
.lbl rndkylp
lds r1, r2
lds r0, r3
xor r3, r2
sts r2, r1 
dec r1
bni rndkynd
inc r0
jmp rndkylp
.lbl rndkynd
ret